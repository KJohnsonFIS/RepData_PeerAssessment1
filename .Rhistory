ElecSub$DateTime <- strptime(ElecSub$DateTime,"%d/%m/%Y %H:%M:%S")
ElecSub$Time <- strptime(ElecSub$Time, "%H:%M")  ## Time converted to R time format
## Open PNG device and create plot3.png in working directory
## png(file = "plot3.png", width = 480, height = 480)
with(ElecSub, plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
legend("topright", pch="", col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", pch="", col = col, legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", pch="", col = col, legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", pch="", col = ("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
with(ElecSub, plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
legend("topright", pch="", col = col, legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
with(ElecSub, plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
## legend("topright", pch="", col = ("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", pch="", col = ("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
with(ElecSub, plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
## legend("topright", pch="", col = ("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", pch="", col = ("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", type = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
with(ElecSub, plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
## legend("topright", pch = 1, col = ("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", type = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
lwd()
par("lwd")
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
png(file = "plot3.png", width = 480, height = 480)
#Draw Plot3 - Energy sub meeting - Weekday plot, add lines Sub_metering_1 Sub_metering_2 Sub_metering_3 for  and send to png
with(ElecSub, plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
## create a legend
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## close Png device
dev.off()
setwd ("C:/Users/user/My Documents/Coursera")
## read text file - Electronic Power Consumption
ElecData <- read.table("household_power_consumption.txt", header=T,sep=";",na.strings = c("?"), colClasses=c("Time"="character", "Date"="character"))
## create DateTime field
ElecData$DateTime <- paste(ElecData$Date,ElecData$Time)
ElecData$Date <- as.Date(ElecData$Date, "%d/%m/%Y")  ## Date converted to YYYY-MM-DD format
## subset 2/1/2007 thru 2/2/2007 records
ElecSub <- subset(ElecData, (Date == "2007-02-01" | Date == "2007-02-02"))
## convert DateTime to date format
ElecSub$DateTime <- strptime(ElecSub$DateTime,"%d/%m/%Y %H:%M:%S")
ElecSub$Time <- strptime(ElecSub$Time, "%H:%M")  ## Time converted to R time format
## Open PNG device and create plot4.png in working directory
## png(file = "plot4.png", width = 480, height = 480)
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, plot(DateTime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = ""))
lines(ElecSub$DateTime, ElecSub$Global_active_power)
with(ElecSub, {plot(DateTime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = ""))
lines(ElecSub$DateTime, ElecSub$Global_active_power)
plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
})
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, {plot(DateTime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = ""))
lines(ElecSub$DateTime, ElecSub$Global_active_power)
plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
})
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, {plot(DateTime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = "")
lines(ElecSub$DateTime, ElecSub$Global_active_power)
plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = ""))
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, {
plot(DateTime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = "")
lines(ElecSub$DateTime, ElecSub$Global_active_power)
plot(DateTime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = "")
lines(ElecSub$DateTime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$DateTime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$DateTime, ElecSub$Sub_metering_3, col = "blue")
## create a legend
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
})
ElecData <- read.table("household_power_consumption.txt", header=T,sep=";",na.strings = c("?"), colClasses=c("Time"="character", "Date"="character"))
## create datetime field
ElecData$datetime <- paste(ElecData$Date,ElecData$Time)
ElecData$Date <- as.Date(ElecData$Date, "%d/%m/%Y")  ## Date converted to YYYY-MM-DD format
## subset 2/1/2007 thru 2/2/2007 records
ElecSub <- subset(ElecData, (Date == "2007-02-01" | Date == "2007-02-02"))
## convert datetime to date format
ElecSub$datetime <- strptime(ElecSub$datetime,"%d/%m/%Y %H:%M:%S")
ElecSub$Time <- strptime(ElecSub$Time, "%H:%M")  ## Time converted to R time format
## Open PNG device and create plot4.png in working directory
## png(file = "plot4.png", width = 480, height = 480)
#Draw Plot4 - 4 charts Global Active Power, Voltage, Energy sub meeting & Global Reactive Power, each by- Weekday plot, add lines Sub_metering_1 Sub_metering_2 Sub_metering_3 for  and send to png
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, {
## row1 column 1 graph
plot(datetime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = "")
lines(ElecSub$datetime, ElecSub$Global_active_power)
## row1 column 2 graph
plot(datetime, Voltage, main = "", xlab = "datetime", ylab = "Voltage", pch = "")
lines(ElecSub$datetime, ElecSub$Voltage)
## row2 column 1 graph
plot(datetime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = "")
lines(ElecSub$datetime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$datetime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$datetime, ElecSub$Sub_metering_3, col = "blue")
## create a legend
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## row2 column 2 graph
plot(datetime, Voltage, main = "", xlab = "datetime", ylab = "Voltage", pch = "")
lines(ElecSub$datetime, ElecSub$Global_reactive_power)
})
## close Png device
## dev.off()
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, {
## row1 column 1 graph
plot(datetime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = "")
lines(ElecSub$datetime, ElecSub$Global_active_power)
## row1 column 2 graph
plot(datetime, Voltage, main = "", xlab = "datetime", ylab = "Voltage", pch = "")
lines(ElecSub$datetime, ElecSub$Voltage)
## row2 column 1 graph
plot(datetime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = "")
lines(ElecSub$datetime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$datetime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$datetime, ElecSub$Sub_metering_3, col = "blue")
## create a legend
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## row2 column 2 graph
plot(datetime, Global_reactive_power, main = "", pch = "")
lines(ElecSub$datetime, ElecSub$Global_reactive_power)
})
## close Png device
## dev.off()
png(file = "plot4.png", width = 480, height = 480)
#Draw Plot4 - 4 charts Global Active Power, Voltage, Energy sub meeting & Global Reactive Power, each by- Weekday plot, add lines Sub_metering_1 Sub_metering_2 Sub_metering_3 for  and send to png
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0)) ## set # columns to 2, # rows to 2
with(ElecSub, {
## row1 column 1 graph
plot(datetime, Global_active_power, main = "", xlab = "", ylab = "Global Active Power", pch = "")
lines(ElecSub$datetime, ElecSub$Global_active_power)
## row1 column 2 graph
plot(datetime, Voltage, main = "", xlab = "datetime", ylab = "Voltage", pch = "")
lines(ElecSub$datetime, ElecSub$Voltage)
## row2 column 1 graph
plot(datetime, Sub_metering_1, main = "", xlab = "", ylab = "Energy sub metering", pch = "")
lines(ElecSub$datetime, ElecSub$Sub_metering_1, col = "black")
lines(ElecSub$datetime, ElecSub$Sub_metering_2, col = "red")
lines(ElecSub$datetime, ElecSub$Sub_metering_3, col = "blue")
## create a legend
legend("topright", lwd = 1, col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## row2 column 2 graph
plot(datetime, Global_reactive_power, main = "", pch = "")
lines(ElecSub$datetime, ElecSub$Global_reactive_power)
})
## close Png device
dev.off()
ElecData <- read.table("household_power_consumption.txt", header=T,sep=";",na.strings = c("?"), colClasses=c("Time"="character", "Date"="character"))
## create DateTime field
ElecData$DateTime <- paste(ElecData$Date,ElecData$Time)
ElecData$Date <- as.Date(ElecData$Date, "%d/%m/%Y")  ## Date converted to YYYY-MM-DD format
## subset 2/1/2007 thru 2/2/2007 records
ElecSub <- subset(ElecData, (Date == "2007-02-01" | Date == "2007-02-02"))
## convert DateTime to date format
ElecSub$DateTime <- strptime(ElecSub$DateTime,"%d/%m/%Y %H:%M:%S")
ElecSub$Time <- strptime(ElecSub$Time, "%H:%M")  ## Time converted to R time format
## Open PNG device and create plot2.png in working directory
##png(file = "plot2.png", width = 480, height = 480)
#Draw Plot2 - Global_active_power - Weekday plot and send to png
plot(ElecSub$Global_active_power~ElecSub$Datetime,type="l",ylab="Global Active Power (killo watts)", xlab = "")
plot(ElecSub$Global_active_power~ElecSub$DateTime,type="l",ylab="Global Active Power (killo watts)", xlab = "")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
library(nlme)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages(lattice)
install.packages("lattice")
install.packages("lattice")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("gplot")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
gplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
setwd ("C:\Users\user\Documents\Coursera\Data Science Classes\ExData")
URL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(url=URL,destfile="./exdata-data-NEI_data.zip")
unzip(zipfile="./exdata-data-NEI_data.zip",exdir=".",)
## read PM2.5 Emissions Data file
NEIData <- read.rds("summarySCC_PM25.rds")
NEIData <- readRDS("summarySCC_PM25.rds")
## read Source Classification Code Table
SCC <- readRDS("Source_Classification_Code.rds")
class(NEIData$Year)
head(NEIData)
class(NEIData$year)
with(NEIData, plot(year, Emissions, main = "", xlab = "", ylab = "Emissions", pch = ""))
lines(NEIData$year, NEIData$Emissions)
with(NEIData, plot(year, Emissions, main = "", xlab = "", ylab = "Emissions", pch = ""))
lines(NEIData$year, NEIData$Emissions)
Activity2
setwd ("C:/Users/user/repro1/RepData_PeerAssessment1")
Activity <- read.csv("activity.csv")
lastrec <- nrow(Activity)
library(plyr)
arrange(Activity, asc(date))
StepsDays<-ddply(Activity,.(date),summarize,TotalSteps=sum(steps,na.rm = TRUE))
head(StepsDays)
# total steps by day histogram
hist(StepsDays$TotalSteps,main = "Total Number of Steps",xlab = "Total Steps per Day")
# sort steps in ascending order
##SortSteps <- arrange(Activity, steps)
##SortSteps <- Activity[order(date, steps),]
head(SortSteps,300)
as.numeric(lastrec)
# mean and Median steps by day
#MeanMedianDays<-ddply(StepsDays,summarize,MeanSteps=mean(TotalSteps,na.rm = TRUE),MedianSteps=median(TotalSteps,na.rm = TRUE))
MeanDays<-mean(StepsDays$TotalSteps,na.rm = TRUE)
MedianDays<-median(StepsDays$TotalSteps,na.rm = TRUE)
head(MeanMedianDays)
## "The Mean is 'r MeanDays' and median is" in markdown
MedianDays
#get average of steps taken of 5 min intervals across all days
IntvlAvg<-ddply(Activity,.(NewIntervals),summarize,mean=mean(steps,na.rm = TRUE))
IntvlAvg<-ddply(Activity,.(intervals),summarize,mean=mean(steps,na.rm = TRUE))
IntvlAvg<-ddply(Activity,.(interval),summarize,mean=mean(steps,na.rm = TRUE))
#StepsDays<-ddply(Activity,.(date),summarize,C=sum(steps,na.rm = TRUE))
#IntvlAvg <- ddply(Activity, c("5mins_intervals"), summarize,stepsmean = mean(steps, na.rm=TRUE))
head(IntvlAvg,20)
tail(IntvlAvg,20)
names(IntvlAvg)
## create time series plot with 5 mins intervals of step averages
install.packages("ggplot")
library(ggplot2)
ggplot(IntvlAvg, aes(interval,mean)) + geom_line() + xlab("") + ylab("Average steps per time interval")
# get the 5 min interval with the average maximum steps
# sort with averages in desc order
SortAvg <- arrange(IntvlAvg, desc(mean))
MaxAvg <- SortAvg[1,2]
MaxAvg
###The interval with max steps is 'r MaxAvg'  - put in markdown
### count the number of rows with NA
totNA <- sum(is.na(Activity$steps))
totNA
#### there are 'r totNA' in dataset
## fill in NAs go back and get original
NoNAs <- Activity[complete.cases(Activity),]
nrow(Activity)
nrow(NoNAs)
NAs<-subset(Activity,is.na(Activity$steps))
nrow(NAs)
## replace NA with the avg for the interval
##MergeNAs <- merge(NAs, IntvlAvg, by=c("NewIntervals"))
MergeNAs <- merge(NAs, IntvlAvg, by=c("interval"))
nrow(MergeNAs)
head(MergeNAs)
head(NoNAs)
## replace NA with mean in steps
MergeNAs$steps <- NULL
ReplNAs <- MergeNAs[c("mean", "date", "interval")]
head(ReplNAs)
colnames(ReplNAs)[1] <- "steps"
CompActv <- rbind(NoNAs,ReplNAs)
nrow(CompActv)
#### =========================== process with NA replaced
Activity2 <- arrange(CompActv, date)
StepsDays2<-ddply(Activity2,.(date),summarize,TotalSteps=sum(steps))
StepsDays2
head(StepsDays)
# total steps by day histogram
hist(StepsDays2$TotalSteps,main = "Total Number of Steps - NA replaced",xlab = "Total Steps per Day")
# mean and Median steps by day
MeanDays2<-mean(StepsDays2$TotalSteps)
MedianDays2<-median(StepsDays2$TotalSteps)
MedianDays2
MeanDays2
## "The Mean is 'r MeanDays' and median is" in markdown
DiffMean <- MeanDays2 - MeanDays
DiffMean
DiffMedian <- MedianDays2 - MedianDays
DiffMedian
## "The diff Mean is 'r DiffMean ' and diff Median is 'r DiffMedian ' in markdown
## "impact of putting in NA
==== weekday vs weekend
X <- (weekdays(Activity2$date)
)
X <- (weekdays(is.numeric(Activity2$date))
)
X <- (weekdays(is.date(Activity2$date)))
class(Activity2$date)
X <- as.Date(Activity2$date, format = "%m/%d/%Y")
X
class(X)
class(Activity2$date)
head(Activity2)
Activity <- read.csv("activity.csv",stringsAsFactors = FALSE)
class(Activity2$date)
class(Activity$date)
X <- as.Date(Activity$date, format = "%m/%d/%Y")
X
Activity$date
X <- weekdays(as.Date(Activity$date))
X
Activity <- read.csv("activity.csv")
X <- weekdays(as.Date(Activity$date))
X
#colnames(Activity)[4] <- "NewIntervals"
# total steps by day
library(plyr)
arrange(Activity, asc(date))
#arrange(Activity, asc(date))
StepsDays<-ddply(Activity,.(date),summarize,TotalSteps=sum(steps,na.rm = TRUE))
head(StepsDays)
# total steps by day histogram
hist(StepsDays$TotalSteps,main = "Total Number of Steps",xlab = "Total Steps per Day")
# sort steps in ascending order
##SortSteps <- arrange(Activity, steps)
##SortSteps <- Activity[order(date, steps),]
head(SortSteps,300)
#as.numeric(lastrec)
# mean and Median steps by day
#MeanMedianDays<-ddply(StepsDays,summarize,MeanSteps=mean(TotalSteps,na.rm = TRUE),MedianSteps=median(TotalSteps,na.rm = TRUE))
MeanDays<-mean(StepsDays$TotalSteps,na.rm = TRUE)
MedianDays<-median(StepsDays$TotalSteps,na.rm = TRUE)
## "The Mean is 'r MeanDays' and median is" in markdown
MedianDays
#get average of steps taken of 5 min intervals across all days
##IntvlAvg<-ddply(Activity,.(NewIntervals),summarize,mean=mean(steps,na.rm = TRUE))
IntvlAvg<-ddply(Activity,.(interval),summarize,mean=mean(steps,na.rm = TRUE))
#StepsDays<-ddply(Activity,.(date),summarize,C=sum(steps,na.rm = TRUE))
#IntvlAvg <- ddply(Activity, c("5mins_intervals"), summarize,stepsmean = mean(steps, na.rm=TRUE))
head(IntvlAvg,20)
tail(IntvlAvg,20)
names(IntvlAvg)
## create time series plot with 5 mins intervals of step averages
install.packages("ggplot")
library(ggplot2)
#ggplot(IntvlAvg, aes(NewIntervals,mean)) + geom_line() + xlab("") + ylab("Average steps per time interval")
ggplot(IntvlAvg, aes(interval,mean)) + geom_line() + xlab("") + ylab("Average steps per time interval")
# get the 5 min interval with the average maximum steps
# sort with averages in desc order
SortAvg <- arrange(IntvlAvg, desc(mean))
MaxAvg <- SortAvg[1,2]
MaxAvg
###The interval with max steps is 'r MaxAvg'  - put in markdown
### count the number of rows with NA
totNA <- sum(is.na(Activity$steps))
totNA
#### there are 'r totNA' in dataset
## fill in NAs go back and get original
NoNAs <- Activity[complete.cases(Activity),]
nrow(Activity)
nrow(NoNAs)
NAs<-subset(Activity,is.na(Activity$steps))
nrow(NAs)
## replace NA with the avg for the interval
##MergeNAs <- merge(NAs, IntvlAvg, by=c("NewIntervals"))
MergeNAs <- merge(NAs, IntvlAvg, by=c("interval"))
nrow(MergeNAs)
head(MergeNAs)
head(NoNAs)
## replace NA with mean in steps
MergeNAs$steps <- NULL
## row combine - after same format
##ReplNAs <- MergeNAs[c("mean", "date", "interval", "NewIntervals")]
ReplNAs <- MergeNAs[c("mean", "date", "interval")]
head(ReplNAs)
colnames(ReplNAs)[1] <- "steps"
CompActv <- rbind(NoNAs,ReplNAs)
nrow(CompActv)
#### =========================== process with NA replaced
Activity2 <- arrange(CompActv, date)
StepsDays2<-ddply(Activity2,.(date),summarize,TotalSteps=sum(steps))
StepsDays2
head(StepsDays)
# total steps by day histogram
hist(StepsDays2$TotalSteps,main = "Total Number of Steps - NA replaced",xlab = "Total Steps per Day")
# mean and Median steps by day
MeanDays2<-mean(StepsDays2$TotalSteps)
MedianDays2<-median(StepsDays2$TotalSteps)
MedianDays2
MeanDays2
## "The Mean is 'r MeanDays' and median is" in markdown
DiffMean <- MeanDays2 - MeanDays
DiffMean
DiffMedian <- MedianDays2 - MedianDays
DiffMedian
## "The diff Mean is 'r DiffMean ' and diff Median is 'r DiffMedian ' in markdown
## "impact of putting in NA
==== weekday vs weekend
X <- weekdays(as.Date(Activity2$date))
head(X,27)
Activity2$DayofWeek <- weekdays(as.Date(Activity2$date))
head(Activity2)
if(Activity2$DayofWeek=='Saturday'){
Activity2$WeekPart <- "weekend"}
else {
if (Activity2$DayofWeek=='Sunday'){
}
if(Activity2$DayofWeek=="Saturday"){
Activity2$WeekPart <- "weekend"}
else {
head(Activity2)
Activity2$PartWeek <- ifelse(Activity2$DayofWeek == ("Saturday" || "Sunday"),"weekend", "weekday")
class(Activity2$DayofWeek)
Activity2$PartWeek <- if (Activity2(DayofWeek == "Saturday") || (Activity2(DayofWeek == "Sunday")), "weekend")
Activity2$PartWeek <- ifelse(Activity2$DayofWeek == ("Saturday" || "Sunday") "weekend", "weekday")
Activity2$PartWeek <- if (Activity2(DayofWeek == "Saturday") || (Activity2(DayofWeek == "Sunday")) "weekend")
Activity2$PartWeek <- if (Activity2(DayofWeek == "Saturday") || (Activity2(DayofWeek == "Sunday")) c("weekend"))
if (Activity2$DayofWeek == "Saturday") {Activity2$PartWeek == "weekend"}
Activity2$PartWeek <- ifelse(Activity2$DayofWeek == "Saturday", "weekend", "weekday")
head(Activity2)
Activity2$PartWeek <- ifelse(Activity2$DayofWeek == ("Saturday" ||"Sunday"), "weekend", "weekday")
Activity2$PartWeek <- ifelse(Activity2$DayofWeek == "Saturday" || Activity2$DayofWeek =="Sunday"), "weekend", "weekday")
Activity2$PartWeek <- ifelse((Activity2$DayofWeek == "Saturday") || (Activity2$DayofWeek =="Sunday")), "weekend", "weekday")
Activity2$PartWeek <- if(Activity2$DayofWeek == "Saturday"), "weekend")
Activity2$PartWeek <- if(Activity2$DayofWeek == "Saturday", "weekend")
Activity2$PartWeek <- if (Activity2$DayofWeek == "Saturday" "weekend")
Activity2$PartWeek <- if (Activity2$DayofWeek == "Saturday" || Activity2$DayofWeek == "Sunday") then "weekend"
Activity2$PartWeek <- if (Activity2$DayofWeek == "Saturday" "weekend")
Activity2$PartWeek <- ifelse (Activity2$DayofWeek == "Saturday", "weekend", "weekday")
Activity2$PartWeek <- ifelse (Activity2$DayofWeek == "Sunday", "weekend", Activity2$PartWeek)
head(Activity2,100)
tail(Activity2,100)
Activity2
class(Activity2$PartWeek)
Activity2$PartWeek <- as.factor(Activity2$PartWeek)
Activity2$PartWeek <- ifelse (Activity2$DayofWeek == "Saturday", "weekend", "weekday")
Activity2$PartWeek <- ifelse (Activity2$DayofWeek == "Sunday", "weekend", Activity2$PartWeek)
class(Activity2$PartWeek)
Activity2$PartWeek <- as.factor(Activity2$PartWeek)
class(Activity2$PartWeek)
tail(Activity2,100)
IntvlAvgWk <-ddply(Activity2,.(interval, PartWeek),summarize,mean=mean(steps,na.rm = TRUE))
IntvlAvgWk
p1 <- ggplot(IntvlAvgWk, aes(x=interval, y=mean, group=PartWeek)) +
geom_line() +
xlab = "Interval", ylab = "Number of steps")
p1 <- ggplot(IntvlAvgWk, aes(x=interval, y=mean, group=PartWeek),
xlab = "Interval", ylab = "Number of steps")
p1
ggplot(IntvlAvgWk, aes(x=interval, y=mean, group=PartWeek),
xlab = "Interval", ylab = "Number of steps")
g <- ggplot(IntvlAvgWk, aes(IntvlAvgWk$interval, IntvlAvgWk$PartWeek))
g
g <- ggplot(IntvlAvgWk, aes(IntvlAvgWk$interval, IntvlAvgWk$mean))
g
gf <- g + geom_line() + facet_grid(. ~ IntvlAvgWk$mean) + labs(labs(x = "Intervals", y = "Number of steps")
)
gf
gf <- g + geom_line() + facet_grid(. ~ IntvlAvgWk$PartWeek) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
g <- ggplot(IntvlAvgWk, aes(IntvlAvgWk$interval, IntvlAvgWk$mean))
gf <- g + geom_line() + facet_grid(. ~ IntvlAvgWk$PartWeek) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
IntvlAvgWk
head (IntvlAvgWk)
Activity2$DayofWeek <- weekdays(as.Date(Activity2$date))
Activity2$PartWeek <- as.factor(Activity2$PartWeek)
Activity2$PartWeek <- ifelse (Activity2$DayofWeek == "Saturday", "weekend", "weekday")
Activity2$PartWeek <- ifelse (Activity2$DayofWeek == "Sunday", "weekend", Activity2$PartWeek)
IntvlAvgWk <-ddply(Activity2,.(interval, PartWeek),summarize,mean=mean(steps,na.rm = TRUE))
g <- ggplot(IntvlAvgWk, aes(IntvlAvgWk$interval, IntvlAvgWk$mean))
gf <- g + geom_line() + facet_grid(. ~ IntvlAvgWk$PartWeek) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
class(IntvlAvgWk$PartWeek)
IntvlAvgWk$PartWeek <- as.factor(IntvlAvgWk$PartWeek)
class(IntvlAvgWk$PartWeek)
ggplot(IntvlAvgWk, aes(x=interval, y=mean, group=PartWeek),
xlab = "Interval", ylab = "Number of steps")
g <- ggplot(IntvlAvgWk, aes(IntvlAvgWk$interval, IntvlAvgWk$mean))
gf <- g + geom_line() + facet_grid(. ~ IntvlAvgWk$PartWeek) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
g <- ggplot(IntvlAvgWk, aes(x=interval, y=mean))
gf <- g + facet_grid(PartWeek ~ . ) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
g <- ggplot(data=IntvlAvgWk, aes(x=interval, y=mean))
gf <- g + facet_grid(PartWeek ~ . ) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
gf <- g + geom_line() + facet_grid(PartWeek ~ . ) + labs(labs(x = "Intervals", y = "Number of steps"))
gf
